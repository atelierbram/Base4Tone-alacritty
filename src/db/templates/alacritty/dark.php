<?php
echo "# Configuration for Alacritty, the GPU enhanced terminal emulator.\n";
echo "# Any items in the `env` entry below will be added as\n";
echo "# environment variables. Some entries may override variables\n";
echo "# set by alacritty itself.\n";
echo "#env:\n";
echo "  # TERM variable\n";
echo "  #\n";
echo "  # This value is used to set the `\$TERM` environment variable for\n";
echo "  # each instance of Alacritty. If it is not present, alacritty will\n";
echo "  # check the local terminfo database and use `alacritty` if it is\n";
echo "  # available, otherwise `xterm-256color` is used.\n";
echo "  #TERM: xterm-256color\n";
echo "\n";
echo "window:\n";
echo "  # Window dimensions (changes require restart)\n";
echo "  #\n";
echo "  # Specified in number of columns/lines, not pixels.\n";
echo "  # If both are `0`, this setting is ignored.\n";
echo "  dimensions:\n";
echo "    columns: 0\n";
echo "    lines: 0\n";
echo "\n";
echo "  # Window position (changes require restart)\n";
echo "  #\n";
echo "  # Specified in number of pixels.\n";
echo "  # If the position is not set, the window manager will handle the placement.\n";
echo "  #position:\n";
echo "  #  x: 0\n";
echo "  #  y: 0\n";
echo "\n";
echo "  # Window padding (changes require restart)\n";
echo "  #\n";
echo "  # Blank space added around the window in pixels. This padding is scaled\n";
echo "  # by DPI and the specified value is always added at both opposing sides.\n";
echo "  padding:\n";
echo "    x: 20\n";
echo "    y: 15\n";
echo "\n";
echo "  # Spread additional padding evenly around the terminal content.\n";
echo "  dynamic_padding: false\n";
echo "\n";
echo "  # Window decorations\n";
echo "  #\n";
echo "  # Values for `decorations`:\n";
echo "  #     - full: Borders and title bar\n";
echo "  #     - none: Neither borders nor title bar\n";
echo "  #\n";
echo "  # Values for `decorations` (macOS only):\n";
echo "  #     - transparent: Title bar, transparent background and title bar buttons\n";
echo "  #     - buttonless: Title bar, transparent background, but no title bar buttons\n";
echo "  decorations: full\n";
echo "\n";
echo "  # Startup Mode (changes require restart)\n";
echo "  #\n";
echo "  # Values for `startup_mode`:\n";
echo "  #   - Windowed\n";
echo "  #   - Maximized\n";
echo "  #   - Fullscreen\n";
echo "  #\n";
echo "  # Values for `startup_mode` (macOS only):\n";
echo "  #   - SimpleFullscreen\n";
echo "  startup_mode: Windowed\n";
echo "\n";
echo "  # Window title\n";
echo "  #title: Alacritty\n";
echo "\n";
echo "  # Window class (Linux only):\n";
echo "  #class:\n";
echo "    # Application instance name\n";
echo "    #instance: Alacritty\n";
echo "    # General application class\n";
echo "    #general: Alacritty\n";
echo "\n";
echo "  # GTK theme variant (Linux only)\n";
echo "  #\n";
echo "  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.\n";
echo "  # Set this to `None` to use the default theme variant.\n";
echo "  #gtk_theme_variant: None\n";
echo "\n";
echo "scrolling:\n";
echo "  # Maximum number of lines in the scrollback buffer.\n";
echo "  # Specifying '0' will disable scrolling.\n";
echo "  history: 10000\n";
echo "\n";
echo "  # Number of lines the viewport will move for every line scrolled when\n";
echo "  # scrollback is enabled (history > 0).\n";
echo "  multiplier: 3\n";
echo "\n";
echo "  # Scroll to the bottom when new text is written to the terminal.\n";
echo "  auto_scroll: false\n";
echo "\n";
echo "# Spaces per Tab (changes require restart)\n";
echo "#\n";
echo "# This setting defines the width of a tab in cells.\n";
echo "#\n";
echo "# Some applications, like Emacs, rely on knowing about the width of a tab.\n";
echo "# To prevent unexpected behavior in these applications, it's also required to\n";
echo "# change the `it` value in terminfo when altering this setting.\n";
echo "tabspaces: 8\n";
echo "\n";
echo "# Font configuration\n";
echo "font:\n";
echo "  # Normal (roman) font face\n";
echo "  normal:\n";
echo "    # Font family\n";
echo "    #\n";
echo "    # Default:\n";
echo "    #   - (macOS) Menlo\n";
echo "    #   - (Linux) monospace\n";
echo "    #   - (Windows) Consolas\n";
echo "    # family: Meslo LG L DZ\n";
echo "    family: Consolas\n";
echo "\n";
echo "    # The `style` can be specified to pick a specific face.\n";
echo "    #style: Regular\n";
echo "\n";
echo "  # Bold font face\n";
echo "  #bold:\n";
echo "    # Font family\n";
echo "    #\n";
echo "    # If the bold family is not specified, it will fall back to the\n";
echo "    # value specified for the normal font.\n";
echo "    #family: monospace\n";
echo "\n";
echo "    # The `style` can be specified to pick a specific face.\n";
echo "    #style: Bold\n";
echo "\n";
echo "  # Italic font face\n";
echo "  #italic:\n";
echo "    # Font family\n";
echo "    #\n";
echo "    # If the italic family is not specified, it will fall back to the\n";
echo "    # value specified for the normal font.\n";
echo "    #family: monospace\n";
echo "\n";
echo "    # The `style` can be specified to pick a specific face.\n";
echo "    #style: Italic\n";
echo "\n";
echo "  # Bold italic font face\n";
echo "  #bold_italic:\n";
echo "    # Font family\n";
echo "    #\n";
echo "    # If the bold italic family is not specified, it will fall back to the\n";
echo "    # value specified for the normal font.\n";
echo "    #family: monospace\n";
echo "\n";
echo "    # The `style` can be specified to pick a specific face.\n";
echo "    #style: Bold Italic\n";
echo "\n";
echo "  # Point size\n";
echo "  size: 14.0\n";
echo "\n";
echo "  # Offset is the extra space around each character. `offset.y` can be thought of\n";
echo "  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.\n";
echo "  offset:\n";
echo "    x: 0\n";
echo "    y: 6\n";
echo "\n";
echo "  # Glyph offset determines the locations of the glyphs within their cells with\n";
echo "  # the default being at the bottom. Increasing `x` moves the glyph to the right,\n";
echo "  # increasing `y` moves the glyph upwards.\n";
echo "  glyph_offset:\n";
echo "    x: 0\n";
echo "    y: 0\n";
echo "\n";
echo "  # Thin stroke font rendering (macOS only)\n";
echo "  #\n";
echo "  # Thin strokes are suitable for retina displays, but for non-retina screens\n";
echo "  # it is recommended to set `use_thin_strokes` to `false`\n";
echo "  #\n";
echo "  # macOS >= 10.14.x:\n";
echo "  #\n";
echo "  # If the font quality on non-retina display looks bad then set\n";
echo "  # `use_thin_strokes` to `true` and enable font smoothing by running the\n";
echo "  # following command:\n";
echo "  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`\n";
echo "  #\n";
echo "  # This is a global setting and will require a log out or restart to take\n";
echo "  # effect.\n";
echo "  #use_thin_strokes: true\n";
echo "\n";
echo "# If `true`, bold text is drawn using the bright color variants.\n";
echo "#draw_bold_text_with_bright_colors: true\n";
echo "\n";
echo "# Colors $scheme-Dark\n";
echo "# by $author; on $url_project; \n";
echo "colors:\n";
echo "  # Default colors\n";
echo "  primary:\n";
echo "    background: '0x$B4T_b2'\n";
echo "    foreground: '0x$B4T_b15'\n";
echo "\n";
echo "    # Bright and dim foreground colors\n";
echo "    #\n";
echo "    # The dimmed foreground color is calculated automatically if it is not present.\n";
echo "    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`\n";
echo "    # is `false`, the normal foreground color will be used.\n";
echo "    #dim_foreground: '0x9a9a9a'\n";
echo "    #bright_foreground: '0xffffff'\n";
echo "\n";
echo "  # Cursor colors\n";
echo "  #\n";
echo "  # Colors which should be used to draw the terminal cursor. If these are unset,\n";
echo "  # the cursor color will be the inverse of the cell color.\n";
echo "  cursor:\n";
echo "    text: '0x$B4T_b0'\n";
echo "    cursor: '0x$B4T_d8'\n";
echo "\n";
echo "  # Selection colors\n";
echo "  #\n";
echo "  # Colors which should be used to draw the selection area. If selection\n";
echo "  # background is unset, selection color will be the inverse of the cell colors.\n";
echo "  # If only text is unset the cell text color will remain the same.\n";
echo "  #selection:\n";
echo "  #  text: '0xeaeaea'\n";
echo "  #  background: '0x404040'\n";
echo "\n";
echo "  # Normal colors\n";
echo "  normal:\n";
echo "    black:   '0x$B4T_b0'\n";
echo "    red:     '0x$B4T_D12'\n";
echo "    green:   '0x$B4T_B17'\n";
echo "    yellow:  '0x$B4T_A16'\n";
echo "    blue:    '0x$B4T_B15'\n";
echo "    magenta: '0x$B4T_C15'\n";
echo "    cyan:    '0x$B4T_A13'\n";
echo "    white:   '0x$B4T_B23'\n";
echo "\n";
echo "  # Bright colors\n";
echo "  #bright:\n";
echo "  #  black:   '0x666666'\n";
echo "  #  red:     '0xff3334'\n";
echo "  #  green:   '0x9ec400'\n";
echo "  #  yellow:  '0xe7c547'\n";
echo "  #  blue:    '0x7aa6da'\n";
echo "  #  magenta: '0xb77ee0'\n";
echo "  #  cyan:    '0x54ced6'\n";
echo "  #  white:   '0xffffff'\n";
echo "\n";
echo "  # Dim colors\n";
echo "  #\n";
echo "  # If the dim colors are not set, they will be calculated automatically based\n";
echo "  # on the `normal` colors.\n";
echo "  #dim:\n";
echo "  #  black:   '0x000000'\n";
echo "  #  red:     '0x8c3336'\n";
echo "  #  green:   '0x7a8530'\n";
echo "  #  yellow:  '0x97822e'\n";
echo "  #  blue:    '0x506d8f'\n";
echo "  #  magenta: '0x80638e'\n";
echo "  #  cyan:    '0x497e7a'\n";
echo "  #  white:   '0x9a9a9a'\n";
echo "\n";
echo "  # Indexed Colors\n";
echo "  #\n";
echo "  # The indexed colors include all colors from 16 to 256.\n";
echo "  # When these are not set, they're filled with sensible defaults.\n";
echo "  #\n";
echo "  # Example:\n";
echo "  #   `- { index: 16, color: '0xff00ff' }`\n";
echo "  #\n";
echo "  indexed_colors: []\n";
echo "\n";
echo "# Visual Bell\n";
echo "#\n";
echo "# Any time the BEL code is received, Alacritty \"rings\" the visual bell. Once\n";
echo "# rung, the terminal background will be set to white and transition back to the\n";
echo "# default background color. You can control the rate of this transition by\n";
echo "# setting the `duration` property (represented in milliseconds). You can also\n";
echo "# configure the transition function by setting the `animation` property.\n";
echo "#\n";
echo "# Values for `animation`:\n";
echo "#   - Ease\n";
echo "#   - EaseOut\n";
echo "#   - EaseOutSine\n";
echo "#   - EaseOutQuad\n";
echo "#   - EaseOutCubic\n";
echo "#   - EaseOutQuart\n";
echo "#   - EaseOutQuint\n";
echo "#   - EaseOutExpo\n";
echo "#   - EaseOutCirc\n";
echo "#   - Linear\n";
echo "#\n";
echo "# Specifying a `duration` of `0` will disable the visual bell.\n";
echo "visual_bell:\n";
echo "  animation: EaseOutExpo\n";
echo "  duration: 0\n";
echo "  color: '0x$B4T_A6'\n";
echo "\n";
echo "# Background opacity\n";
echo "#\n";
echo "# Window opacity as a floating point number from `0.0` to `1.0`.\n";
echo "# The value `0.0` is completely transparent and `1.0` is opaque.\n";
echo "background_opacity: 1.0\n";
echo "\n";
echo "# Mouse bindings\n";
echo "#\n";
echo "# Available fields:\n";
echo "#   - mouse\n";
echo "#   - action\n";
echo "#   - mods (optional)\n";
echo "#\n";
echo "# Values for `mouse`:\n";
echo "#   - Middle\n";
echo "#   - Left\n";
echo "#   - Right\n";
echo "#   - Numeric identifier such as `5`\n";
echo "#\n";
echo "# All available `mods` and `action` values are documented in the key binding\n";
echo "# section.\n";
echo "mouse_bindings:\n";
echo "  - { mouse: Middle, action: PasteSelection }\n";
echo "\n";
echo "mouse:\n";
echo "  # Click settings\n";
echo "  #\n";
echo "  # The `double_click` and `triple_click` settings control the time\n";
echo "  # alacritty should wait for accepting multiple clicks as one double\n";
echo "  # or triple click.\n";
echo "  double_click: { threshold: 300 }\n";
echo "  triple_click: { threshold: 300 }\n";
echo "\n";
echo "  # If this is `true`, the cursor is temporarily hidden when typing.\n";
echo "  hide_when_typing: false\n";
echo "\n";
echo "  url:\n";
echo "    # URL launcher\n";
echo "    #\n";
echo "    # This program is executed when clicking on a text which is recognized as a URL.\n";
echo "    # The URL is always added to the command as the last parameter.\n";
echo "    #\n";
echo "    # When set to `None`, URL launching will be disabled completely.\n";
echo "    #\n";
echo "    # Default:\n";
echo "    #   - (macOS) open\n";
echo "    #   - (Linux) xdg-open\n";
echo "    #   - (Windows) explorer\n";
echo "    #launcher:\n";
echo "    #  program: xdg-open\n";
echo "    #  args: []\n";
echo "\n";
echo "    # URL modifiers\n";
echo "    #\n";
echo "    # These are the modifiers that need to be held down for opening URLs when clicking\n";
echo "    # on them. The available modifiers are documented in the key binding section.\n";
echo "    modifiers: None\n";
echo "\n";
echo "selection:\n";
echo  " semantic_escape_chars: \",│`|:\\\"' ()[]{}<>\"\n";
echo "\n";
echo "  # When set to `true`, selected text will be copied to the primary clipboard.\n";
echo " save_to_clipboard: false\n";
echo "\n";
echo "# Allow terminal applications to change Alacritty's window title.\n";
echo "dynamic_title: true\n";
echo "\n";
echo "cursor:\n";
echo "  # Cursor style\n";
echo "  #\n";
echo "  # Values for `style`:\n";
echo "  #   - ▇ Block\n";
echo "  #   - _ Underline\n";
echo "  #   - | Beam\n";
echo "  style: Block\n";
echo "\n";
echo "  # If this is `true`, the cursor will be rendered as a hollow box when the\n";
echo "  # window is not focused.\n";
echo "  unfocused_hollow: true\n";
echo "\n";
echo "# Live config reload (changes require restart)\n";
echo "live_config_reload: true\n";
echo "\n";
echo "# Shell\n";
echo "#\n";
echo "# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.\n";
echo "# Entries in `shell.args` are passed unmodified as arguments to the shell.\n";
echo "#\n";
echo "# Default:\n";
echo "#   - (macOS) /bin/bash --login\n";
echo "#   - (Linux) user login shell\n";
echo "#   - (Windows) powershell\n";
echo "#shell:\n";
echo "#  program: /bin/bash\n";
echo "#  args:\n";
echo "#    - --login\n";
echo "\n";
echo "# Startup directory\n";
echo "#\n";
echo "# Directory the shell is started in. If this is unset, or `None`, the working\n";
echo "# directory of the parent process will be used.\n";
echo "working_directory: None\n";
echo "\n";
echo "# Windows 10 ConPTY backend (Windows only)\n";
echo "#\n";
echo "# This will enable better color support and may resolve other issues,\n";
echo "# however this API and its implementation is still young and so is\n";
echo "# disabled by default, as stability may not be as good as the winpty\n";
echo "# backend.\n";
echo "#\n";
echo "# Alacritty will fall back to the WinPTY automatically if the ConPTY\n";
echo "# backend cannot be initialized.\n";
echo "enable_experimental_conpty_backend: false\n";
echo "\n";
echo "# Send ESC (\x1b) before characters when alt is pressed.\n";
echo "alt_send_esc: true\n";
echo "\n";
echo "debug:\n";
echo "  # Display the time it takes to redraw each frame.\n";
echo "  render_timer: false\n";
echo "\n";
echo "  # Keep the log file after quitting Alacritty.\n";
echo "  persistent_logging: false\n";
echo "\n";
echo "  # Log level\n";
echo "  #\n";
echo "  # Values for `log_level`:\n";
echo "  #   - None\n";
echo "  #   - Error\n";
echo "  #   - Warn\n";
echo "  #   - Info\n";
echo "  #   - Debug\n";
echo "  #   - Trace\n";
echo "  log_level: Warn\n";
echo "\n";
echo "  # Print all received window events.\n";
echo "  print_events: false\n";
echo "\n";
echo "  # Record all characters and escape sequences as test data.\n";
echo "  ref_test: false\n";
echo "\n";
echo "# Key bindings\n";
echo "#\n";
echo "# Key bindings are specified as a list of objects. Each binding will specify a\n";
echo "# key and modifiers required to trigger it, terminal modes where the binding is\n";
echo "# applicable, and what should be done when the key binding fires. It can either\n";
echo "# send a byte sequence to the running application (`chars`), execute a\n";
echo "# predefined action (`action`) or fork and execute a specified command plus\n";
echo "# arguments (`command`).\n";
echo "#\n";
echo "# Bindings are always filled by default, but will be replaced when a new binding\n";
echo "# with the same triggers is defined. To unset a default binding, it can be\n";
echo "# mapped to the `None` action.\n";
echo "#\n";
echo "# Example:\n";
echo "#   `- { key: V, mods: Control|Shift, action: Paste }`\n";
echo "#\n";
echo "# Available fields:\n";
echo "#   - key\n";
echo "#   - mods (optional)\n";
echo "#   - chars | action | command (exactly one required)\n";
echo "#   - mode (optional)\n";
echo "#\n";
echo "# Values for `key`:\n";
echo "#   - `A` -> `Z`\n";
echo "#   - `F1` -> `F12`\n";
echo "#   - `Key1` -> `Key0`\n";
echo "#\n";
echo "#   A full list with available key codes can be found here:\n";
echo "#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants\n";
echo "#\n";
echo "#   Instead of using the name of the keys, the `key` field also supports using\n";
echo "#   the scancode of the desired key. Scancodes have to be specified as a\n";
echo "#   decimal number.\n";
echo "#   This command will allow you to display the hex scancodes for certain keys:\n";
echo "#     `showkey --scancodes`\n";
echo "#\n";
echo "# Values for `mods`:\n";
echo "#   - Command\n";
echo "#   - Control\n";
echo "#   - Option\n";
echo "#   - Super\n";
echo "#   - Shift\n";
echo "#   - Alt\n";
echo "#\n";
echo "#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.\n";
echo "#   Whitespace and capitalization is relevant and must match the example.\n";
echo "#\n";
echo "# Values for `chars`:\n";
echo "#   The `chars` field writes the specified string to the terminal. This makes\n";
echo "#   it possible to pass escape sequences.\n";
echo "#   To find escape codes for bindings like `PageUp` (\"\x1b[5~\"), you can run\n";
echo "#   the command `showkey -a` outside of tmux.\n";
echo "#   Note that applications use terminfo to map escape sequences back to\n";
echo "#   keys. It is therefore required to update the terminfo when\n";
echo "#   changing an escape sequence.\n";
echo "#\n";
echo "# Values for `action`:\n";
echo "#   - Paste\n";
echo "#   - PasteSelection\n";
echo "#   - Copy\n";
echo "#   - IncreaseFontSize\n";
echo "#   - DecreaseFontSize\n";
echo "#   - ResetFontSize\n";
echo "#   - ScrollPageUp\n";
echo "#   - ScrollPageDown\n";
echo "#   - ScrollLineUp\n";
echo "#   - ScrollLineDown\n";
echo "#   - ScrollToTop\n";
echo "#   - ScrollToBottom\n";
echo "#   - ClearHistory\n";
echo "#   - Hide\n";
echo "#   - Quit\n";
echo "#   - ClearLogNotice\n";
echo "#   - SpawnNewInstance\n";
echo "#   - ToggleFullscreen\n";
echo "#   - None\n";
echo "#\n";
echo "# Values for `action` (macOS only):\n";
echo "#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space\n";
echo "#\n";
echo "# Values for `command`:\n";
echo "#   The `command` field must be a map containing a `program` string and\n";
echo "#   an `args` array of command line parameter strings.\n";
echo "#\n";
echo "#   Example:\n";
echo "#       `command: { program: \"alacritty\", args: [\"-e\", \"vttest\"] }`\n";
echo "#\n";
echo "# Values for `mode`:\n";
echo "#   - ~AppCursor\n";
echo "#   - AppCursor\n";
echo "#   - ~AppKeypad\n";
echo "#   - AppKeypad\n";
echo "key_bindings:\n";
echo "  # (Windows/Linux only)\n";
echo "  #- { key: V,        mods: Control|Shift, action: Paste            }\n";
echo "  #- { key: C,        mods: Control|Shift, action: Copy             }\n";
echo "  #- { key: Insert,   mods: Shift,         action: PasteSelection   }\n";
echo "  #- { key: Key0,     mods: Control,       action: ResetFontSize    }\n";
echo "  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }\n";
echo "  #- { key: Add,      mods: Control,       action: IncreaseFontSize }\n";
echo "  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }\n";
echo "  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }\n";
echo "  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }\n";
echo "\n";
echo "  # (macOS only)\n";
echo "  #- { key: Key0,   mods: Command,         action: ResetFontSize    }\n";
echo "  #- { key: Equals, mods: Command,         action: IncreaseFontSize }\n";
echo "  #- { key: Add,    mods: Command,         action: IncreaseFontSize }\n";
echo "  #- { key: Minus,  mods: Command,         action: DecreaseFontSize }\n";
echo "  #- { key: K,      mods: Command,         action: ClearHistory     }\n";
echo "  #- { key: K,      mods: Command,         chars: \"\x0c\"          }\n";
echo "  #- { key: V,      mods: Command,         action: Paste            }\n";
echo "  #- { key: C,      mods: Command,         action: Copy             }\n";
echo "  #- { key: H,      mods: Command,         action: Hide             }\n";
echo "  #- { key: Q,      mods: Command,         action: Quit             }\n";
echo "  #- { key: W,      mods: Command,         action: Quit             }\n";
echo "  #- { key: F,      mods: Command|Control, action: ToggleFullscreen }\n";
echo "\n";
echo "  - { key: Paste,                   action: Paste                            }\n";
echo "  - { key: Copy,                    action: Copy                             }\n";
echo "  - { key: L,        mods: Control, action: ClearLogNotice                   }\n";
echo "  - { key: L,        mods: Control, chars: \"\x0c\"                          }\n";
echo "  - { key: Home,     mods: Alt,     chars: \"\x1b[1;3H\"                       }\n";
echo "  - { key: Home,                    chars: \"\x1bOH\",        mode: AppCursor  }\n";
echo "  - { key: Home,                    chars: \"\x1b[H\",        mode: ~AppCursor }\n";
echo "  - { key: End,      mods: Alt,     chars: \"\x1b[1;3F\"                       }\n";
echo "  - { key: End,                     chars: \"\x1bOF\",        mode: AppCursor  }\n";
echo "  - { key: End,                     chars: \"\x1b[F\",        mode: ~AppCursor }\n";
echo "  - { key: PageUp,   mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }\n";
echo "  - { key: PageUp,   mods: Shift,   chars: \"\x1b[5;2~\",     mode: Alt        }\n";
echo "  - { key: PageUp,   mods: Control, chars: \"\x1b[5;5~\"                       }\n";
echo "  - { key: PageUp,   mods: Alt,     chars: \"\x1b[5;3~\"                       }\n";
echo "  - { key: PageUp,                  chars: \"\x1b[5~\"                         }\n";
echo "  - { key: PageDown, mods: Shift,   action: ScrollPageDown, mode: ~Alt       }\n";
echo "  - { key: PageDown, mods: Shift,   chars: \"\x1b[6;2~\",     mode: Alt        }\n";
echo "  - { key: PageDown, mods: Control, chars: \"\x1b[6;5~\"                       }\n";
echo "  - { key: PageDown, mods: Alt,     chars: \"\x1b[6;3~\"                       }\n";
echo "  - { key: PageDown,                chars: \"\x1b[6~\"                         }\n";
echo "  - { key: Tab,      mods: Shift,   chars: \"\x1b[Z\"                          }\n";
echo "  - { key: Back,                    chars: \"\x7f\"                            }\n";
echo "  - { key: Back,     mods: Alt,     chars: \"\x1b\x7f\"                        }\n";
echo "  - { key: Insert,                  chars: \"\x1b[2~\"                         }\n";
echo "  - { key: Delete,                  chars: \"\x1b[3~\"                         }\n";
echo "  - { key: Left,     mods: Shift,   chars: \"\x1b[1;2D\"                       }\n";
echo "  - { key: Left,     mods: Control, chars: \"\x1b[1;5D\"                       }\n";
echo "  - { key: Left,     mods: Alt,     chars: \"\x1b[1;3D\"                       }\n";
echo "  - { key: Left,                    chars: \"\x1b[D\",        mode: ~AppCursor }\n";
echo "  - { key: Left,                    chars: \"\x1bOD\",        mode: AppCursor  }\n";
echo "  - { key: Right,    mods: Shift,   chars: \"\x1b[1;2C\"                       }\n";
echo "  - { key: Right,    mods: Control, chars: \"\x1b[1;5C\"                       }\n";
echo "  - { key: Right,    mods: Alt,     chars: \"\x1b[1;3C\"                       }\n";
echo "  - { key: Right,                   chars: \"\x1b[C\",        mode: ~AppCursor }\n";
echo "  - { key: Right,                   chars: \"\x1bOC\",        mode: AppCursor  }\n";
echo "  - { key: Up,       mods: Shift,   chars: \"\x1b[1;2A\"                       }\n";
echo "  - { key: Up,       mods: Control, chars: \"\x1b[1;5A\"                       }\n";
echo "  - { key: Up,       mods: Alt,     chars: \"\x1b[1;3A\"                       }\n";
echo "  - { key: Up,                      chars: \"\x1b[A\",        mode: ~AppCursor }\n";
echo "  - { key: Up,                      chars: \"\x1bOA\",        mode: AppCursor  }\n";
echo "  - { key: Down,     mods: Shift,   chars: \"\x1b[1;2B\"                       }\n";
echo "  - { key: Down,     mods: Control, chars: \"\x1b[1;5B\"                       }\n";
echo "  - { key: Down,     mods: Alt,     chars: \"\x1b[1;3B\"                       }\n";
echo "  - { key: Down,                    chars: \"\x1b[B\",        mode: ~AppCursor }\n";
echo "  - { key: Down,                    chars: \"\x1bOB\",        mode: AppCursor  }\n";
echo "  - { key: F1,                      chars: \"\x1bOP\"                          }\n";
echo "  - { key: F2,                      chars: \"\x1bOQ\"                          }\n";
echo "  - { key: F3,                      chars: \"\x1bOR\"                          }\n";
echo "  - { key: F4,                      chars: \"\x1bOS\"                          }\n";
echo "  - { key: F5,                      chars: \"\x1b[15~\"                        }\n";
echo "  - { key: F6,                      chars: \"\x1b[17~\"                        }\n";
echo "  - { key: F7,                      chars: \"\x1b[18~\"                        }\n";
echo "  - { key: F8,                      chars: \"\x1b[19~\"                        }\n";
echo "  - { key: F9,                      chars: \"\x1b[20~\"                        }\n";
echo "  - { key: F10,                     chars: \"\x1b[21~\"                        }\n";
echo "  - { key: F11,                     chars: \"\x1b[23~\"                        }\n";
echo "  - { key: F12,                     chars: \"\x1b[24~\"                        }\n";
echo "  - { key: F1,       mods: Shift,   chars: \"\x1b[1;2P\"                       }\n";
echo "  - { key: F2,       mods: Shift,   chars: \"\x1b[1;2Q\"                       }\n";
echo "  - { key: F3,       mods: Shift,   chars: \"\x1b[1;2R\"                       }\n";
echo "  - { key: F4,       mods: Shift,   chars: \"\x1b[1;2S\"                       }\n";
echo "  - { key: F5,       mods: Shift,   chars: \"\x1b[15;2~\"                      }\n";
echo "  - { key: F6,       mods: Shift,   chars: \"\x1b[17;2~\"                      }\n";
echo "  - { key: F7,       mods: Shift,   chars: \"\x1b[18;2~\"                      }\n";
echo "  - { key: F8,       mods: Shift,   chars: \"\x1b[19;2~\"                      }\n";
echo "  - { key: F9,       mods: Shift,   chars: \"\x1b[20;2~\"                      }\n";
echo "  - { key: F10,      mods: Shift,   chars: \"\x1b[21;2~\"                      }\n";
echo "  - { key: F11,      mods: Shift,   chars: \"\x1b[23;2~\"                      }\n";
echo "  - { key: F12,      mods: Shift,   chars: \"\x1b[24;2~\"                      }\n";
echo "  - { key: F1,       mods: Control, chars: \"\x1b[1;5P\"                       }\n";
echo "  - { key: F2,       mods: Control, chars: \"\x1b[1;5Q\"                       }\n";
echo "  - { key: F3,       mods: Control, chars: \"\x1b[1;5R\"                       }\n";
echo "  - { key: F4,       mods: Control, chars: \"\x1b[1;5S\"                       }\n";
echo "  - { key: F5,       mods: Control, chars: \"\x1b[15;5~\"                      }\n";
echo "  - { key: F6,       mods: Control, chars: \"\x1b[17;5~\"                      }\n";
echo "  - { key: F7,       mods: Control, chars: \"\x1b[18;5~\"                      }\n";
echo "  - { key: F8,       mods: Control, chars: \"\x1b[19;5~\"                      }\n";
echo "  - { key: F9,       mods: Control, chars: \"\x1b[20;5~\"                      }\n";
echo "  - { key: F10,      mods: Control, chars: \"\x1b[21;5~\"                      }\n";
echo "  - { key: F11,      mods: Control, chars: \"\x1b[23;5~\"                      }\n";
echo "  - { key: F12,      mods: Control, chars: \"\x1b[24;5~\"                      }\n";
echo "  - { key: F1,       mods: Alt,     chars: \"\x1b[1;6P\"                       }\n";
echo "  - { key: F2,       mods: Alt,     chars: \"\x1b[1;6Q\"                       }\n";
echo "  - { key: F3,       mods: Alt,     chars: \"\x1b[1;6R\"                       }\n";
echo "  - { key: F4,       mods: Alt,     chars: \"\x1b[1;6S\"                       }\n";
echo "  - { key: F5,       mods: Alt,     chars: \"\x1b[15;6~\"                      }\n";
echo "  - { key: F6,       mods: Alt,     chars: \"\x1b[17;6~\"                      }\n";
echo "  - { key: F7,       mods: Alt,     chars: \"\x1b[18;6~\"                      }\n";
echo "  - { key: F8,       mods: Alt,     chars: \"\x1b[19;6~\"                      }\n";
echo "  - { key: F9,       mods: Alt,     chars: \"\x1b[20;6~\"                      }\n";
echo "  - { key: F10,      mods: Alt,     chars: \"\x1b[21;6~\"                      }\n";
echo "  - { key: F11,      mods: Alt,     chars: \"\x1b[23;6~\"                      }\n";
echo "  - { key: F12,      mods: Alt,     chars: \"\x1b[24;6~\"                      }\n";
echo "  - { key: F1,       mods: Super,   chars: \"\x1b[1;3P\"                       }\n";
echo "  - { key: F2,       mods: Super,   chars: \"\x1b[1;3Q\"                       }\n";
echo "  - { key: F3,       mods: Super,   chars: \"\x1b[1;3R\"                       }\n";
echo "  - { key: F4,       mods: Super,   chars: \"\x1b[1;3S\"                       }\n";
echo "  - { key: F5,       mods: Super,   chars: \"\x1b[15;3~\"                      }\n";
echo "  - { key: F6,       mods: Super,   chars: \"\x1b[17;3~\"                      }\n";
echo "  - { key: F7,       mods: Super,   chars: \"\x1b[18;3~\"                      }\n";
echo "  - { key: F8,       mods: Super,   chars: \"\x1b[19;3~\"                      }\n";
echo "  - { key: F9,       mods: Super,   chars: \"\x1b[20;3~\"                      }\n";
echo "  - { key: F10,      mods: Super,   chars: \"\x1b[21;3~\"                      }\n";
echo "  - { key: F11,      mods: Super,   chars: \"\x1b[23;3~\"                      }\n";
echo "  - { key: F12,      mods: Super,   chars: \"\x1b[24;3~\"                      }\n";
echo "  - { key: NumpadEnter,             chars: \"\\n\"                             }\n";
